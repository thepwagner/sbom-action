{
    "payloadType": "application/vnd.in-toto+json",
    "payload": "{"_type":"https://in-toto.io/Statement/v0.1","predicateType":"cosign.sigstore.dev/attestation/v1","subject":[{"name":"ghcr.io/thepwagner-org/debian-bullseye","digest":{"sha256":"5dc6bfbfe775cadccba92e40c3e5254e057f3acabffcd447f30c4c34794222d4"}}],"predicate":{"Data":"{\n  \"bomFormat\": \"CycloneDX\",\n  \"specVersion\": \"1.4\",\n  \"serialNumber\": \"urn:uuid:4eecc5c2-4467-4811-a68d-38c4f106e386\",\n  \"version\": 1,\n  \"metadata\": {\n    \"timestamp\": \"2022-07-13T20:17:01Z\",\n    \"tools\": [\n      {\n        \"vendor\": \"anchore\",\n        \"name\": \"syft\",\n        \"version\": \"0.44.1\"\n      }\n    ],\n    \"component\": {\n      \"bom-ref\": \"fade0f7734c18338\",\n      \"type\": \"container\",\n      \"name\": \"ghcr.io/thepwagner-org/debian-bullseye:9ec73cc052f9acf1ec792ff5d23e1b14d50fc585\",\n      \"version\": \"sha256:27c13a70b81a3d6058ff0a456481012f97f34e0130a2711c5090418332c7383f\"\n    }\n  },\n  \"components\": [\n    {\n      \"bom-ref\": \"pkg:deb/debian/adduser@3.118?arch=all\\u0026distro=debian-11\\u0026syft-id=a124711c55c5b5ec\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Adduser Developers \\u003cadduser@packages.debian.org\\u003e\",\n      \"name\": \"adduser\",\n      \"version\": \"3.118\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:adduser:adduser:3.118:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/adduser@3.118?arch=all\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/adduser/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/adduser.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/adduser.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"849\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/apt@2.2.4?arch=amd64\\u0026distro=debian-11\\u0026syft-id=aa414cb26ab3bbca\",\n      \"type\": \"library\",\n      \"publisher\": \"APT Development Team \\u003cdeity@lists.debian.org\\u003e\",\n      \"name\": \"apt\",\n      \"version\": \"2.2.4\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:apt:apt:2.2.4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/apt@2.2.4?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/apt/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/apt.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/apt.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"4337\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/base-files@11.1+deb11u4?arch=amd64\\u0026distro=debian-11\\u0026syft-id=e443ca582e4ecbea\",\n      \"type\": \"library\",\n      \"publisher\": \"Santiago Vila \\u003csanvila@debian.org\\u003e\",\n      \"name\": \"base-files\",\n      \"version\": \"11.1+deb11u4\",\n      \"cpe\": \"cpe:2.3:a:base-files:base-files:11.1\\\\+deb11u4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/base-files@11.1+deb11u4?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base-files:base_files:11.1\\\\+deb11u4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base_files:base-files:11.1\\\\+deb11u4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base_files:base_files:11.1\\\\+deb11u4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base:base-files:11.1\\\\+deb11u4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base:base_files:11.1\\\\+deb11u4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/base-files/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/base-files.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/base-files.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"340\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/base-passwd@3.5.51?arch=amd64\\u0026distro=debian-11\\u0026syft-id=4b06cb374332f86a\",\n      \"type\": \"library\",\n      \"publisher\": \"Colin Watson \\u003ccjwatson@debian.org\\u003e\",\n      \"name\": \"base-passwd\",\n      \"version\": \"3.5.51\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:base-passwd:base-passwd:3.5.51:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/base-passwd@3.5.51?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base-passwd:base_passwd:3.5.51:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base_passwd:base-passwd:3.5.51:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base_passwd:base_passwd:3.5.51:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base:base-passwd:3.5.51:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:base:base_passwd:3.5.51:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/base-passwd/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/base-passwd.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"243\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/bash@5.1-2+deb11u1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=e489f9fee082a54e\",\n      \"type\": \"library\",\n      \"publisher\": \"Matthias Klose \\u003cdoko@debian.org\\u003e\",\n      \"name\": \"bash\",\n      \"version\": \"5.1-2+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:bash:bash:5.1-2\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/bash@5.1-2+deb11u1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/bash/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/bash.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/bash.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"6469\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/bsdutils@1:2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux%402.36.1-8+deb11u1\\u0026distro=debian-11\\u0026syft-id=f277da72145fb122\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"bsdutils\",\n      \"version\": \"1:2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:bsdutils:bsdutils:1\\\\:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/bsdutils@1:2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux%402.36.1-8+deb11u1\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/bsdutils/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/bsdutils.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"394\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"util-linux\"\n        },\n        {\n          \"name\": \"syft:metadata:sourceVersion\",\n          \"value\": \"2.36.1-8+deb11u1\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/coreutils@8.32-4+b1?arch=amd64\\u0026upstream=coreutils%408.32-4\\u0026distro=debian-11\\u0026syft-id=5ea1df19e7f98d54\",\n      \"type\": \"library\",\n      \"publisher\": \"Michael Stone \\u003cmstone@debian.org\\u003e\",\n      \"name\": \"coreutils\",\n      \"version\": \"8.32-4+b1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:coreutils:coreutils:8.32-4\\\\+b1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/coreutils@8.32-4+b1?arch=amd64\\u0026upstream=coreutils%408.32-4\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/coreutils/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/coreutils.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"17478\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"coreutils\"\n        },\n        {\n          \"name\": \"syft:metadata:sourceVersion\",\n          \"value\": \"8.32-4\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/dash@0.5.11+git20200708+dd9ef66-5?arch=amd64\\u0026distro=debian-11\\u0026syft-id=f1bb94f1de148c52\",\n      \"type\": \"library\",\n      \"publisher\": \"Andrej Shadura \\u003candrewsh@debian.org\\u003e\",\n      \"name\": \"dash\",\n      \"version\": \"0.5.11+git20200708+dd9ef66-5\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"FSFUL\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"FSFULLR\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:dash:dash:0.5.11\\\\+git20200708\\\\+dd9ef66-5:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/dash@0.5.11+git20200708+dd9ef66-5?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/dash/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/dash.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"221\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/debconf@1.5.77?arch=all\\u0026distro=debian-11\\u0026syft-id=bbadd8ec8c7191de\",\n      \"type\": \"library\",\n      \"publisher\": \"Debconf Developers \\u003cdebconf-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"debconf\",\n      \"version\": \"1.5.77\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:debconf:debconf:1.5.77:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/debconf@1.5.77?arch=all\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/debconf/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/debconf.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/debconf.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"517\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/debian-archive-keyring@2021.1.1?arch=all\\u0026distro=debian-11\\u0026syft-id=87c7296dad941a8e\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Release Team \\u003cpackages@release.debian.org\\u003e\",\n      \"name\": \"debian-archive-keyring\",\n      \"version\": \"2021.1.1\",\n      \"cpe\": \"cpe:2.3:a:debian-archive-keyring:debian-archive-keyring:2021.1.1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/debian-archive-keyring@2021.1.1?arch=all\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian-archive-keyring:debian_archive_keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian_archive_keyring:debian-archive-keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian_archive_keyring:debian_archive_keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian-archive:debian-archive-keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian-archive:debian_archive_keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian_archive:debian-archive-keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian_archive:debian_archive_keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian:debian-archive-keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:debian:debian_archive_keyring:2021.1.1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/debian-archive-keyring/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/debian-archive-keyring.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/debian-archive-keyring.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"234\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/debianutils@4.11.2?arch=amd64\\u0026distro=debian-11\\u0026syft-id=8f8ec2bbbfdd75a3\",\n      \"type\": \"library\",\n      \"publisher\": \"Clint Adams \\u003cclint@debian.org\\u003e\",\n      \"name\": \"debianutils\",\n      \"version\": \"4.11.2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:debianutils:debianutils:4.11.2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/debianutils@4.11.2?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/debianutils/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/debianutils.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"230\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/diffutils@1:3.7-5?arch=amd64\\u0026distro=debian-11\\u0026syft-id=3396b2091eb738df\",\n      \"type\": \"library\",\n      \"publisher\": \"Santiago Vila \\u003csanvila@debian.org\\u003e\",\n      \"name\": \"diffutils\",\n      \"version\": \"1:3.7-5\",\n      \"cpe\": \"cpe:2.3:a:diffutils:diffutils:1\\\\:3.7-5:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/diffutils@1:3.7-5?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/diffutils/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/diffutils.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1598\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/dpkg@1.20.11?arch=amd64\\u0026distro=debian-11\\u0026syft-id=c6dafb96b825a24e\",\n      \"type\": \"library\",\n      \"publisher\": \"Dpkg Developers \\u003cdebian-dpkg@lists.debian.org\\u003e\",\n      \"name\": \"dpkg\",\n      \"version\": \"1.20.11\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:dpkg:dpkg:1.20.11:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/dpkg@1.20.11?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/dpkg/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/dpkg.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/dpkg.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"6973\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/e2fsprogs@1.46.2-2?arch=amd64\\u0026distro=debian-11\\u0026syft-id=529fb29c48e0a3a0\",\n      \"type\": \"library\",\n      \"publisher\": \"Theodore Y. Ts'o \\u003ctytso@mit.edu\\u003e\",\n      \"name\": \"e2fsprogs\",\n      \"version\": \"1.46.2-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:e2fsprogs:e2fsprogs:1.46.2-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/e2fsprogs@1.46.2-2?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/e2fsprogs/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/e2fsprogs.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/e2fsprogs.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1511\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/findutils@4.8.0-1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=f32a2bdab270e8bf\",\n      \"type\": \"library\",\n      \"publisher\": \"Andreas Metzler \\u003cametzler@debian.org\\u003e\",\n      \"name\": \"findutils\",\n      \"version\": \"4.8.0-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.3\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:findutils:findutils:4.8.0-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/findutils@4.8.0-1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/findutils/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/findutils.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1959\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/gcc-10-base@10.2.1-6?arch=amd64\\u0026upstream=gcc-10\\u0026distro=debian-11\\u0026syft-id=3cdf11976de03f14\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GCC Maintainers \\u003cdebian-gcc@lists.debian.org\\u003e\",\n      \"name\": \"gcc-10-base\",\n      \"version\": \"10.2.1-6\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.2\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:gcc-10-base:gcc-10-base:10.2.1-6:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/gcc-10-base@10.2.1-6?arch=amd64\\u0026upstream=gcc-10\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc-10-base:gcc_10_base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_10_base:gcc-10-base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_10_base:gcc_10_base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc-10:gcc-10-base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc-10:gcc_10_base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_10:gcc-10-base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_10:gcc_10_base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc:gcc-10-base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc:gcc_10_base:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/gcc-10-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/gcc-10-base:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"261\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gcc-10\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/gcc-9-base@9.3.0-22?arch=amd64\\u0026upstream=gcc-9\\u0026distro=debian-11\\u0026syft-id=fa0987b9eb161d04\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GCC Maintainers \\u003cdebian-gcc@lists.debian.org\\u003e\",\n      \"name\": \"gcc-9-base\",\n      \"version\": \"9.3.0-22\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.2\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:gcc-9-base:gcc-9-base:9.3.0-22:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/gcc-9-base@9.3.0-22?arch=amd64\\u0026upstream=gcc-9\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc-9-base:gcc_9_base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_9_base:gcc-9-base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_9_base:gcc_9_base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc-9:gcc-9-base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc-9:gcc_9_base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_9:gcc-9-base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc_9:gcc_9_base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc:gcc-9-base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:gcc:gcc_9_base:9.3.0-22:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/gcc-9-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/gcc-9-base:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"262\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gcc-9\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/gpgv@2.2.27-2+deb11u2?arch=amd64\\u0026upstream=gnupg2\\u0026distro=debian-11\\u0026syft-id=33f6b18dc5e35288\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GnuPG Maintainers \\u003cpkg-gnupg-maint@lists.alioth.debian.org\\u003e\",\n      \"name\": \"gpgv\",\n      \"version\": \"2.2.27-2+deb11u2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"CC0-1.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:gpgv:gpgv:2.2.27-2\\\\+deb11u2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/gpgv@2.2.27-2+deb11u2?arch=amd64\\u0026upstream=gnupg2\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/gpgv/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/gpgv.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"882\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gnupg2\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/grep@3.6-1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=5bce38ab7e035050\",\n      \"type\": \"library\",\n      \"publisher\": \"Anibal Monsalve Salazar \\u003canibal@debian.org\\u003e\",\n      \"name\": \"grep\",\n      \"version\": \"3.6-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:grep:grep:3.6-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/grep@3.6-1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/grep/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/grep.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1091\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/gzip@1.10-4+deb11u1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=eb25aff794b4961c\",\n      \"type\": \"library\",\n      \"publisher\": \"Milan Kupcevic \\u003cmilan@debian.org\\u003e\",\n      \"name\": \"gzip\",\n      \"version\": \"1.10-4+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:gzip:gzip:1.10-4\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/gzip@1.10-4+deb11u1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/gzip/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/gzip.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"242\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/hostname@3.23?arch=amd64\\u0026distro=debian-11\\u0026syft-id=7a0895692bf8e5c4\",\n      \"type\": \"library\",\n      \"publisher\": \"Michael Meskes \\u003cmeskes@debian.org\\u003e\",\n      \"name\": \"hostname\",\n      \"version\": \"3.23\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:hostname:hostname:3.23:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/hostname@3.23?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/hostname/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/hostname.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"50\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/init-system-helpers@1.60?arch=all\\u0026distro=debian-11\\u0026syft-id=fd4f5e16fb283f4\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian systemd Maintainers \\u003cpkg-systemd-maintainers@lists.alioth.debian.org\\u003e\",\n      \"name\": \"init-system-helpers\",\n      \"version\": \"1.60\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:init-system-helpers:init-system-helpers:1.60:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/init-system-helpers@1.60?arch=all\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init-system-helpers:init_system_helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init_system_helpers:init-system-helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init_system_helpers:init_system_helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init-system:init-system-helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init-system:init_system_helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init_system:init-system-helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init_system:init_system_helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init:init-system-helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:init:init_system_helpers:1.60:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/init-system-helpers/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/init-system-helpers.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"131\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libacl1@2.2.53-10?arch=amd64\\u0026upstream=acl\\u0026distro=debian-11\\u0026syft-id=e0a83b52220f81d5\",\n      \"type\": \"library\",\n      \"publisher\": \"Guillem Jover \\u003cguillem@debian.org\\u003e\",\n      \"name\": \"libacl1\",\n      \"version\": \"2.2.53-10\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libacl1:libacl1:2.2.53-10:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libacl1@2.2.53-10?arch=amd64\\u0026upstream=acl\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libacl1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libacl1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"71\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"acl\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libapt-pkg6.0@2.2.4?arch=amd64\\u0026upstream=apt\\u0026distro=debian-11\\u0026syft-id=c9f0db5ec0cd299a\",\n      \"type\": \"library\",\n      \"publisher\": \"APT Development Team \\u003cdeity@lists.debian.org\\u003e\",\n      \"name\": \"libapt-pkg6.0\",\n      \"version\": \"2.2.4\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libapt-pkg6.0:libapt-pkg6.0:2.2.4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libapt-pkg6.0@2.2.4?arch=amd64\\u0026upstream=apt\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libapt-pkg6.0:libapt_pkg6.0:2.2.4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libapt_pkg6.0:libapt-pkg6.0:2.2.4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libapt_pkg6.0:libapt_pkg6.0:2.2.4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libapt:libapt-pkg6.0:2.2.4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libapt:libapt_pkg6.0:2.2.4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libapt-pkg6.0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libapt-pkg6.0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"3373\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"apt\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libattr1@1:2.4.48-6?arch=amd64\\u0026upstream=attr\\u0026distro=debian-11\\u0026syft-id=2e9da59fcfb0bc5\",\n      \"type\": \"library\",\n      \"publisher\": \"Guillem Jover \\u003cguillem@debian.org\\u003e\",\n      \"name\": \"libattr1\",\n      \"version\": \"1:2.4.48-6\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libattr1:libattr1:1\\\\:2.4.48-6:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libattr1@1:2.4.48-6?arch=amd64\\u0026upstream=attr\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libattr1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libattr1:amd64.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libattr1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"56\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"attr\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libaudit-common@1:3.0-2?arch=all\\u0026upstream=audit\\u0026distro=debian-11\\u0026syft-id=125cb964c8647790\",\n      \"type\": \"library\",\n      \"publisher\": \"Laurent Bigonville \\u003cbigon@debian.org\\u003e\",\n      \"name\": \"libaudit-common\",\n      \"version\": \"1:3.0-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-1.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libaudit-common:libaudit-common:1\\\\:3.0-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libaudit-common@1:3.0-2?arch=all\\u0026upstream=audit\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libaudit-common:libaudit_common:1\\\\:3.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libaudit_common:libaudit-common:1\\\\:3.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libaudit_common:libaudit_common:1\\\\:3.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libaudit:libaudit-common:1\\\\:3.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libaudit:libaudit_common:1\\\\:3.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libaudit-common/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libaudit-common.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libaudit-common.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"26\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"audit\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libaudit1@1:3.0-2?arch=amd64\\u0026upstream=audit\\u0026distro=debian-11\\u0026syft-id=da1eb1a6ba858ec9\",\n      \"type\": \"library\",\n      \"publisher\": \"Laurent Bigonville \\u003cbigon@debian.org\\u003e\",\n      \"name\": \"libaudit1\",\n      \"version\": \"1:3.0-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-1.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libaudit1:libaudit1:1\\\\:3.0-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libaudit1@1:3.0-2?arch=amd64\\u0026upstream=audit\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libaudit1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libaudit1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"154\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"audit\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libblkid1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\\u0026syft-id=a73a7e87322fd73a\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"libblkid1\",\n      \"version\": \"2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libblkid1:libblkid1:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libblkid1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libblkid1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libblkid1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"421\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"util-linux\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libbz2-1.0@1.0.8-4?arch=amd64\\u0026upstream=bzip2\\u0026distro=debian-11\\u0026syft-id=6c83d71086c360b5\",\n      \"type\": \"library\",\n      \"publisher\": \"Anibal Monsalve Salazar \\u003canibal@debian.org\\u003e\",\n      \"name\": \"libbz2-1.0\",\n      \"version\": \"1.0.8-4\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libbz2-1.0:libbz2-1.0:1.0.8-4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libbz2-1.0@1.0.8-4?arch=amd64\\u0026upstream=bzip2\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libbz2-1.0:libbz2_1.0:1.0.8-4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libbz2_1.0:libbz2-1.0:1.0.8-4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libbz2_1.0:libbz2_1.0:1.0.8-4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libbz2:libbz2-1.0:1.0.8-4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libbz2:libbz2_1.0:1.0.8-4:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libbz2-1.0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libbz2-1.0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"104\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"bzip2\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libc-bin@2.31-13+deb11u3?arch=amd64\\u0026upstream=glibc\\u0026distro=debian-11\\u0026syft-id=36d1bc00600508ec\",\n      \"type\": \"library\",\n      \"publisher\": \"GNU Libc Maintainers \\u003cdebian-glibc@lists.debian.org\\u003e\",\n      \"name\": \"libc-bin\",\n      \"version\": \"2.31-13+deb11u3\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libc-bin:libc-bin:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libc-bin@2.31-13+deb11u3?arch=amd64\\u0026upstream=glibc\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libc-bin:libc_bin:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libc_bin:libc-bin:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libc_bin:libc_bin:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libc:libc-bin:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libc:libc_bin:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libc-bin/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libc-bin.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libc-bin.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"3692\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"glibc\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libc6@2.31-13+deb11u3?arch=amd64\\u0026upstream=glibc\\u0026distro=debian-11\\u0026syft-id=b175f67e9f350a10\",\n      \"type\": \"library\",\n      \"publisher\": \"GNU Libc Maintainers \\u003cdebian-glibc@lists.debian.org\\u003e\",\n      \"name\": \"libc6\",\n      \"version\": \"2.31-13+deb11u3\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libc6:libc6:2.31-13\\\\+deb11u3:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libc6@2.31-13+deb11u3?arch=amd64\\u0026upstream=glibc\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libc6/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libc6:amd64.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libc6:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"12772\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"glibc\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libcap-ng0@0.7.9-2.2+b1?arch=amd64\\u0026upstream=libcap-ng%400.7.9-2.2\\u0026distro=debian-11\\u0026syft-id=d96dcd0201234163\",\n      \"type\": \"library\",\n      \"publisher\": \"Pierre Chifflier \\u003cpollux@debian.org\\u003e\",\n      \"name\": \"libcap-ng0\",\n      \"version\": \"0.7.9-2.2+b1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libcap-ng0:libcap-ng0:0.7.9-2.2\\\\+b1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libcap-ng0@0.7.9-2.2+b1?arch=amd64\\u0026upstream=libcap-ng%400.7.9-2.2\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcap-ng0:libcap_ng0:0.7.9-2.2\\\\+b1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcap_ng0:libcap-ng0:0.7.9-2.2\\\\+b1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcap_ng0:libcap_ng0:0.7.9-2.2\\\\+b1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcap:libcap-ng0:0.7.9-2.2\\\\+b1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcap:libcap_ng0:0.7.9-2.2\\\\+b1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libcap-ng0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libcap-ng0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"48\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libcap-ng\"\n        },\n        {\n          \"name\": \"syft:metadata:sourceVersion\",\n          \"value\": \"0.7.9-2.2\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libcom-err2@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\\u0026syft-id=baa17fa24974defd\",\n      \"type\": \"library\",\n      \"publisher\": \"Theodore Y. Ts'o \\u003ctytso@mit.edu\\u003e\",\n      \"name\": \"libcom-err2\",\n      \"version\": \"1.46.2-2\",\n      \"cpe\": \"cpe:2.3:a:libcom-err2:libcom-err2:1.46.2-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libcom-err2@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcom-err2:libcom_err2:1.46.2-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcom_err2:libcom-err2:1.46.2-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcom_err2:libcom_err2:1.46.2-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcom:libcom-err2:1.46.2-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libcom:libcom_err2:1.46.2-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libcom-err2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libcom-err2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"97\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"e2fsprogs\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libcrypt1@1:4.4.18-4?arch=amd64\\u0026upstream=libxcrypt\\u0026distro=debian-11\\u0026syft-id=99995fa478d99713\",\n      \"type\": \"library\",\n      \"publisher\": \"Marco d'Itri \\u003cmd@linux.it\\u003e\",\n      \"name\": \"libcrypt1\",\n      \"version\": \"1:4.4.18-4\",\n      \"cpe\": \"cpe:2.3:a:libcrypt1:libcrypt1:1\\\\:4.4.18-4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libcrypt1@1:4.4.18-4?arch=amd64\\u0026upstream=libxcrypt\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libcrypt1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libcrypt1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"226\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libxcrypt\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libdb5.3@5.3.28+dfsg1-0.8?arch=amd64\\u0026upstream=db5.3\\u0026distro=debian-11\\u0026syft-id=8bfc69ad307dcdcd\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Berkeley DB Team \\u003cteam+bdb@tracker.debian.org\\u003e\",\n      \"name\": \"libdb5.3\",\n      \"version\": \"5.3.28+dfsg1-0.8\",\n      \"cpe\": \"cpe:2.3:a:libdb5.3:libdb5.3:5.3.28\\\\+dfsg1-0.8:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libdb5.3@5.3.28+dfsg1-0.8?arch=amd64\\u0026upstream=db5.3\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libdb5.3/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libdb5.3:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1818\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"db5.3\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libdebconfclient0@0.260?arch=amd64\\u0026upstream=cdebconf\\u0026distro=debian-11\\u0026syft-id=c56a3b6958349ec4\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Install System Team \\u003cdebian-boot@lists.debian.org\\u003e\",\n      \"name\": \"libdebconfclient0\",\n      \"version\": \"0.260\",\n      \"cpe\": \"cpe:2.3:a:libdebconfclient0:libdebconfclient0:0.260:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libdebconfclient0@0.260?arch=amd64\\u0026upstream=cdebconf\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libdebconfclient0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libdebconfclient0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"74\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"cdebconf\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libext2fs2@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\\u0026syft-id=69de4a92ec80854d\",\n      \"type\": \"library\",\n      \"publisher\": \"Theodore Y. Ts'o \\u003ctytso@mit.edu\\u003e\",\n      \"name\": \"libext2fs2\",\n      \"version\": \"1.46.2-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libext2fs2:libext2fs2:1.46.2-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libext2fs2@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libext2fs2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libext2fs2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"578\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"e2fsprogs\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libffi7@3.3-6?arch=amd64\\u0026upstream=libffi\\u0026distro=debian-11\\u0026syft-id=389fc122d555059f\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GCC Maintainers \\u003cdebian-gcc@lists.debian.org\\u003e\",\n      \"name\": \"libffi7\",\n      \"version\": \"3.3-6\",\n      \"cpe\": \"cpe:2.3:a:libffi7:libffi7:3.3-6:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libffi7@3.3-6?arch=amd64\\u0026upstream=libffi\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libffi7/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libffi7:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"66\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libffi\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libgcc-s1@10.2.1-6?arch=amd64\\u0026upstream=gcc-10\\u0026distro=debian-11\\u0026syft-id=352e69adb0683b92\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GCC Maintainers \\u003cdebian-gcc@lists.debian.org\\u003e\",\n      \"name\": \"libgcc-s1\",\n      \"version\": \"10.2.1-6\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.2\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libgcc-s1:libgcc-s1:10.2.1-6:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libgcc-s1@10.2.1-6?arch=amd64\\u0026upstream=gcc-10\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgcc-s1:libgcc_s1:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgcc_s1:libgcc-s1:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgcc_s1:libgcc_s1:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgcc:libgcc-s1:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgcc:libgcc_s1:10.2.1-6:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/gcc-10-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libgcc-s1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"116\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gcc-10\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libgcrypt20@1.8.7-6?arch=amd64\\u0026distro=debian-11\\u0026syft-id=e3ab61bc63d33d56\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GnuTLS Maintainers \\u003cpkg-gnutls-maint@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libgcrypt20\",\n      \"version\": \"1.8.7-6\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libgcrypt20:libgcrypt20:1.8.7-6:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libgcrypt20@1.8.7-6?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libgcrypt20/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libgcrypt20:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1355\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libgmp10@2:6.2.1+dfsg-1+deb11u1?arch=amd64\\u0026upstream=gmp\\u0026distro=debian-11\\u0026syft-id=57115b2699bb339\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Science Team \\u003cdebian-science-maintainers@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libgmp10\",\n      \"version\": \"2:6.2.1+dfsg-1+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libgmp10:libgmp10:2\\\\:6.2.1\\\\+dfsg-1\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libgmp10@2:6.2.1+dfsg-1+deb11u1?arch=amd64\\u0026upstream=gmp\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libgmp10/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libgmp10:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"863\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gmp\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libgnutls30@3.7.1-5+deb11u1?arch=amd64\\u0026upstream=gnutls28\\u0026distro=debian-11\\u0026syft-id=c99b4cdecb04d947\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GnuTLS Maintainers \\u003cpkg-gnutls-maint@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libgnutls30\",\n      \"version\": \"3.7.1-5+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"Apache-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.3\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libgnutls30:libgnutls30:3.7.1-5\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libgnutls30@3.7.1-5+deb11u1?arch=amd64\\u0026upstream=gnutls28\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libgnutls30/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libgnutls30:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"3143\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gnutls28\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libgpg-error0@1.38-2?arch=amd64\\u0026upstream=libgpg-error\\u0026distro=debian-11\\u0026syft-id=677aef193106482b\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GnuPG Maintainers \\u003cpkg-gnupg-maint@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libgpg-error0\",\n      \"version\": \"1.38-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libgpg-error0:libgpg-error0:1.38-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libgpg-error0@1.38-2?arch=amd64\\u0026upstream=libgpg-error\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgpg-error0:libgpg_error0:1.38-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgpg_error0:libgpg-error0:1.38-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgpg_error0:libgpg_error0:1.38-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgpg:libgpg-error0:1.38-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgpg:libgpg_error0:1.38-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libgpg-error0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libgpg-error0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"188\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libgpg-error\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libgssapi-krb5-2@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\\u0026syft-id=36af90253b600b64\",\n      \"type\": \"library\",\n      \"publisher\": \"Sam Hartman \\u003chartmans@debian.org\\u003e\",\n      \"name\": \"libgssapi-krb5-2\",\n      \"version\": \"1.18.3-6+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libgssapi-krb5-2:libgssapi-krb5-2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libgssapi-krb5-2@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi-krb5-2:libgssapi_krb5_2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi_krb5_2:libgssapi-krb5-2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi_krb5_2:libgssapi_krb5_2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi-krb5:libgssapi-krb5-2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi-krb5:libgssapi_krb5_2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi_krb5:libgssapi-krb5-2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi_krb5:libgssapi_krb5_2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi:libgssapi-krb5-2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libgssapi:libgssapi_krb5_2:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libgssapi-krb5-2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libgssapi-krb5-2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"451\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"krb5\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libhogweed6@3.7.3-1?arch=amd64\\u0026upstream=nettle\\u0026distro=debian-11\\u0026syft-id=d1c80e04153ae86f\",\n      \"type\": \"library\",\n      \"publisher\": \"Magnus Holmgren \\u003cholmgren@debian.org\\u003e\",\n      \"name\": \"libhogweed6\",\n      \"version\": \"3.7.3-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libhogweed6:libhogweed6:3.7.3-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libhogweed6@3.7.3-1?arch=amd64\\u0026upstream=nettle\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libhogweed6/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libhogweed6:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"455\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"nettle\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libidn2-0@2.3.0-5?arch=amd64\\u0026upstream=libidn2\\u0026distro=debian-11\\u0026syft-id=a8db53ebfc253c16\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Libidn team \\u003chelp-libidn@gnu.org\\u003e\",\n      \"name\": \"libidn2-0\",\n      \"version\": \"2.3.0-5\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libidn2-0:libidn2-0:2.3.0-5:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libidn2-0@2.3.0-5?arch=amd64\\u0026upstream=libidn2\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libidn2-0:libidn2_0:2.3.0-5:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libidn2_0:libidn2-0:2.3.0-5:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libidn2_0:libidn2_0:2.3.0-5:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libidn2:libidn2-0:2.3.0-5:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libidn2:libidn2_0:2.3.0-5:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libidn2-0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libidn2-0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"300\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libidn2\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libk5crypto3@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\\u0026syft-id=422e998f61a81734\",\n      \"type\": \"library\",\n      \"publisher\": \"Sam Hartman \\u003chartmans@debian.org\\u003e\",\n      \"name\": \"libk5crypto3\",\n      \"version\": \"1.18.3-6+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libk5crypto3:libk5crypto3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libk5crypto3@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libk5crypto3/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libk5crypto3:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"296\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"krb5\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libkeyutils1@1.6.1-2?arch=amd64\\u0026upstream=keyutils\\u0026distro=debian-11\\u0026syft-id=bbf061999ae08758\",\n      \"type\": \"library\",\n      \"publisher\": \"Christian Kastner \\u003cckk@debian.org\\u003e\",\n      \"name\": \"libkeyutils1\",\n      \"version\": \"1.6.1-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libkeyutils1:libkeyutils1:1.6.1-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libkeyutils1@1.6.1-2?arch=amd64\\u0026upstream=keyutils\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libkeyutils1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libkeyutils1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"46\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"keyutils\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libkrb5-3@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\\u0026syft-id=ff21f7a518cbf6e7\",\n      \"type\": \"library\",\n      \"publisher\": \"Sam Hartman \\u003chartmans@debian.org\\u003e\",\n      \"name\": \"libkrb5-3\",\n      \"version\": \"1.18.3-6+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libkrb5-3:libkrb5-3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libkrb5-3@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libkrb5-3:libkrb5_3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libkrb5_3:libkrb5-3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libkrb5_3:libkrb5_3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libkrb5:libkrb5-3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libkrb5:libkrb5_3:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libkrb5-3/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libkrb5-3:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1108\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"krb5\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libkrb5support0@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\\u0026syft-id=a64cff3d5807ece2\",\n      \"type\": \"library\",\n      \"publisher\": \"Sam Hartman \\u003chartmans@debian.org\\u003e\",\n      \"name\": \"libkrb5support0\",\n      \"version\": \"1.18.3-6+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libkrb5support0:libkrb5support0:1.18.3-6\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libkrb5support0@1.18.3-6+deb11u1?arch=amd64\\u0026upstream=krb5\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libkrb5support0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libkrb5support0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"169\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"krb5\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/liblz4-1@1.9.3-2?arch=amd64\\u0026upstream=lz4\\u0026distro=debian-11\\u0026syft-id=6372d748473ab2a2\",\n      \"type\": \"library\",\n      \"publisher\": \"Nobuhiro Iwamatsu \\u003ciwamatsu@debian.org\\u003e\",\n      \"name\": \"liblz4-1\",\n      \"version\": \"1.9.3-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:liblz4-1:liblz4-1:1.9.3-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/liblz4-1@1.9.3-2?arch=amd64\\u0026upstream=lz4\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:liblz4-1:liblz4_1:1.9.3-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:liblz4_1:liblz4-1:1.9.3-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:liblz4_1:liblz4_1:1.9.3-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:liblz4:liblz4-1:1.9.3-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:liblz4:liblz4_1:1.9.3-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/liblz4-1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/liblz4-1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"157\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"lz4\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/liblzma5@5.2.5-2.1~deb11u1?arch=amd64\\u0026upstream=xz-utils\\u0026distro=debian-11\\u0026syft-id=da0416f52e605d88\",\n      \"type\": \"library\",\n      \"publisher\": \"Jonathan Nieder \\u003cjrnieder@gmail.com\\u003e\",\n      \"name\": \"liblzma5\",\n      \"version\": \"5.2.5-2.1~deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:liblzma5:liblzma5:5.2.5-2.1\\\\~deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/liblzma5@5.2.5-2.1~deb11u1?arch=amd64\\u0026upstream=xz-utils\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/liblzma5/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/liblzma5:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"277\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"xz-utils\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libmount1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\\u0026syft-id=8d0189ae4d84d16\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"libmount1\",\n      \"version\": \"2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libmount1:libmount1:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libmount1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libmount1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libmount1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"477\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"util-linux\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libnettle8@3.7.3-1?arch=amd64\\u0026upstream=nettle\\u0026distro=debian-11\\u0026syft-id=bda9c00ca69e11a8\",\n      \"type\": \"library\",\n      \"publisher\": \"Magnus Holmgren \\u003cholmgren@debian.org\\u003e\",\n      \"name\": \"libnettle8\",\n      \"version\": \"3.7.3-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libnettle8:libnettle8:3.7.3-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libnettle8@3.7.3-1?arch=amd64\\u0026upstream=nettle\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libnettle8/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libnettle8:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"480\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"nettle\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libnsl2@1.3.0-2?arch=amd64\\u0026upstream=libnsl\\u0026distro=debian-11\\u0026syft-id=b3ecde50c64e6f4d\",\n      \"type\": \"library\",\n      \"publisher\": \"GNU Libc Maintainers \\u003cdebian-glibc@lists.debian.org\\u003e\",\n      \"name\": \"libnsl2\",\n      \"version\": \"1.3.0-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libnsl2:libnsl2:1.3.0-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libnsl2@1.3.0-2?arch=amd64\\u0026upstream=libnsl\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libnsl2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libnsl2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"127\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libnsl\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libp11-kit0@0.23.22-1?arch=amd64\\u0026upstream=p11-kit\\u0026distro=debian-11\\u0026syft-id=addea27288da0292\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GnuTLS Maintainers \\u003cpkg-gnutls-maint@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libp11-kit0\",\n      \"version\": \"0.23.22-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"ISC\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libp11-kit0:libp11-kit0:0.23.22-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libp11-kit0@0.23.22-1?arch=amd64\\u0026upstream=p11-kit\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libp11-kit0:libp11_kit0:0.23.22-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libp11_kit0:libp11-kit0:0.23.22-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libp11_kit0:libp11_kit0:0.23.22-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libp11:libp11-kit0:0.23.22-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libp11:libp11_kit0:0.23.22-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libp11-kit0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libp11-kit0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1401\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"p11-kit\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libpam-modules@1.4.0-9+deb11u1?arch=amd64\\u0026upstream=pam\\u0026distro=debian-11\\u0026syft-id=dbf0d9a6d8661817\",\n      \"type\": \"library\",\n      \"publisher\": \"Steve Langasek \\u003cvorlon@debian.org\\u003e\",\n      \"name\": \"libpam-modules\",\n      \"version\": \"1.4.0-9+deb11u1\",\n      \"cpe\": \"cpe:2.3:a:libpam-modules:libpam-modules:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libpam-modules@1.4.0-9+deb11u1?arch=amd64\\u0026upstream=pam\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam-modules:libpam_modules:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_modules:libpam-modules:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_modules:libpam_modules:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam:libpam-modules:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam:libpam_modules:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libpam-modules/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libpam-modules:amd64.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libpam-modules:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1048\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"pam\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libpam-modules-bin@1.4.0-9+deb11u1?arch=amd64\\u0026upstream=pam\\u0026distro=debian-11\\u0026syft-id=6196393100a266d5\",\n      \"type\": \"library\",\n      \"publisher\": \"Steve Langasek \\u003cvorlon@debian.org\\u003e\",\n      \"name\": \"libpam-modules-bin\",\n      \"version\": \"1.4.0-9+deb11u1\",\n      \"cpe\": \"cpe:2.3:a:libpam-modules-bin:libpam-modules-bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libpam-modules-bin@1.4.0-9+deb11u1?arch=amd64\\u0026upstream=pam\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam-modules-bin:libpam_modules_bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_modules_bin:libpam-modules-bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_modules_bin:libpam_modules_bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam-modules:libpam-modules-bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam-modules:libpam_modules_bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_modules:libpam-modules-bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_modules:libpam_modules_bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam:libpam-modules-bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam:libpam_modules_bin:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libpam-modules-bin/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libpam-modules-bin.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"227\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"pam\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libpam-runtime@1.4.0-9+deb11u1?arch=all\\u0026upstream=pam\\u0026distro=debian-11\\u0026syft-id=62db6ed4651db63c\",\n      \"type\": \"library\",\n      \"publisher\": \"Steve Langasek \\u003cvorlon@debian.org\\u003e\",\n      \"name\": \"libpam-runtime\",\n      \"version\": \"1.4.0-9+deb11u1\",\n      \"cpe\": \"cpe:2.3:a:libpam-runtime:libpam-runtime:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libpam-runtime@1.4.0-9+deb11u1?arch=all\\u0026upstream=pam\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam-runtime:libpam_runtime:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_runtime:libpam-runtime:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam_runtime:libpam_runtime:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam:libpam-runtime:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpam:libpam_runtime:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libpam-runtime/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libpam-runtime.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libpam-runtime.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"965\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"pam\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libpam0g@1.4.0-9+deb11u1?arch=amd64\\u0026upstream=pam\\u0026distro=debian-11\\u0026syft-id=4e92ce4a0cadd805\",\n      \"type\": \"library\",\n      \"publisher\": \"Steve Langasek \\u003cvorlon@debian.org\\u003e\",\n      \"name\": \"libpam0g\",\n      \"version\": \"1.4.0-9+deb11u1\",\n      \"cpe\": \"cpe:2.3:a:libpam0g:libpam0g:1.4.0-9\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libpam0g@1.4.0-9+deb11u1?arch=amd64\\u0026upstream=pam\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libpam0g/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libpam0g:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"244\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"pam\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libpcre2-8-0@10.36-2?arch=amd64\\u0026upstream=pcre2\\u0026distro=debian-11\\u0026syft-id=ad5c00ece43a385b\",\n      \"type\": \"library\",\n      \"publisher\": \"Matthew Vernon \\u003cmatthew@debian.org\\u003e\",\n      \"name\": \"libpcre2-8-0\",\n      \"version\": \"10.36-2\",\n      \"cpe\": \"cpe:2.3:a:libpcre2-8-0:libpcre2-8-0:10.36-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libpcre2-8-0@10.36-2?arch=amd64\\u0026upstream=pcre2\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2-8-0:libpcre2_8_0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2_8_0:libpcre2-8-0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2_8_0:libpcre2_8_0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2-8:libpcre2-8-0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2-8:libpcre2_8_0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2_8:libpcre2-8-0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2_8:libpcre2_8_0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2:libpcre2-8-0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libpcre2:libpcre2_8_0:10.36-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libpcre2-8-0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libpcre2-8-0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"664\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"pcre2\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libpcre3@2:8.39-13?arch=amd64\\u0026upstream=pcre3\\u0026distro=debian-11\\u0026syft-id=9bfc1facaf92a9e8\",\n      \"type\": \"library\",\n      \"publisher\": \"Matthew Vernon \\u003cmatthew@debian.org\\u003e\",\n      \"name\": \"libpcre3\",\n      \"version\": \"2:8.39-13\",\n      \"cpe\": \"cpe:2.3:a:libpcre3:libpcre3:2\\\\:8.39-13:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libpcre3@2:8.39-13?arch=amd64\\u0026upstream=pcre3\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libpcre3/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libpcre3:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"669\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"pcre3\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libseccomp2@2.5.1-1+deb11u1?arch=amd64\\u0026upstream=libseccomp\\u0026distro=debian-11\\u0026syft-id=dc08faabe8c53d70\",\n      \"type\": \"library\",\n      \"publisher\": \"Kees Cook \\u003ckees@debian.org\\u003e\",\n      \"name\": \"libseccomp2\",\n      \"version\": \"2.5.1-1+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libseccomp2:libseccomp2:2.5.1-1\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libseccomp2@2.5.1-1+deb11u1?arch=amd64\\u0026upstream=libseccomp\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libseccomp2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libseccomp2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"158\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libseccomp\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libselinux1@3.1-3?arch=amd64\\u0026upstream=libselinux\\u0026distro=debian-11\\u0026syft-id=c22e716b79ae3091\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian SELinux maintainers \\u003cselinux-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libselinux1\",\n      \"version\": \"3.1-3\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libselinux1:libselinux1:3.1-3:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libselinux1@3.1-3?arch=amd64\\u0026upstream=libselinux\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libselinux1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libselinux1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"207\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libselinux\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libsemanage-common@3.1-1?arch=all\\u0026upstream=libsemanage\\u0026distro=debian-11\\u0026syft-id=69e74fba97dd00a1\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian SELinux maintainers \\u003cselinux-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libsemanage-common\",\n      \"version\": \"3.1-1\",\n      \"cpe\": \"cpe:2.3:a:libsemanage-common:libsemanage-common:3.1-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libsemanage-common@3.1-1?arch=all\\u0026upstream=libsemanage\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libsemanage-common:libsemanage_common:3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libsemanage_common:libsemanage-common:3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libsemanage_common:libsemanage_common:3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libsemanage:libsemanage-common:3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libsemanage:libsemanage_common:3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libsemanage-common/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libsemanage-common.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libsemanage-common.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"36\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libsemanage\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libsemanage1@3.1-1+b2?arch=amd64\\u0026upstream=libsemanage%403.1-1\\u0026distro=debian-11\\u0026syft-id=3ceab259adb7a79e\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian SELinux maintainers \\u003cselinux-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libsemanage1\",\n      \"version\": \"3.1-1+b2\",\n      \"cpe\": \"cpe:2.3:a:libsemanage1:libsemanage1:3.1-1\\\\+b2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libsemanage1@3.1-1+b2?arch=amd64\\u0026upstream=libsemanage%403.1-1\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libsemanage1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libsemanage1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"307\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libsemanage\"\n        },\n        {\n          \"name\": \"syft:metadata:sourceVersion\",\n          \"value\": \"3.1-1\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libsepol1@3.1-1?arch=amd64\\u0026upstream=libsepol\\u0026distro=debian-11\\u0026syft-id=e9dd9e853016e5ac\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian SELinux maintainers \\u003cselinux-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libsepol1\",\n      \"version\": \"3.1-1\",\n      \"cpe\": \"cpe:2.3:a:libsepol1:libsepol1:3.1-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libsepol1@3.1-1?arch=amd64\\u0026upstream=libsepol\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libsepol1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libsepol1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"743\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libsepol\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libsmartcols1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\\u0026syft-id=7665905243694a74\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"libsmartcols1\",\n      \"version\": \"2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libsmartcols1:libsmartcols1:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libsmartcols1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libsmartcols1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libsmartcols1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"328\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"util-linux\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libss2@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\\u0026syft-id=f23e5139ba9365a3\",\n      \"type\": \"library\",\n      \"publisher\": \"Theodore Y. Ts'o \\u003ctytso@mit.edu\\u003e\",\n      \"name\": \"libss2\",\n      \"version\": \"1.46.2-2\",\n      \"cpe\": \"cpe:2.3:a:libss2:libss2:1.46.2-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libss2@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libss2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libss2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"113\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"e2fsprogs\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libssl1.1@1.1.1n-0+deb11u3?arch=amd64\\u0026upstream=openssl\\u0026distro=debian-11\\u0026syft-id=a67b856ebbf869e1\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian OpenSSL Team \\u003cpkg-openssl-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libssl1.1\",\n      \"version\": \"1.1.1n-0+deb11u3\",\n      \"cpe\": \"cpe:2.3:a:libssl1.1:libssl1.1:1.1.1n-0\\\\+deb11u3:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libssl1.1@1.1.1n-0+deb11u3?arch=amd64\\u0026upstream=openssl\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libssl1.1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libssl1.1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"4120\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"openssl\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libstdc++6@10.2.1-6?arch=amd64\\u0026upstream=gcc-10\\u0026distro=debian-11\\u0026syft-id=d513aaad772e74ad\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GCC Maintainers \\u003cdebian-gcc@lists.debian.org\\u003e\",\n      \"name\": \"libstdc++6\",\n      \"version\": \"10.2.1-6\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.2\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libstdc\\\\+\\\\+6:libstdc\\\\+\\\\+6:10.2.1-6:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libstdc++6@10.2.1-6?arch=amd64\\u0026upstream=gcc-10\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/gcc-10-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libstdc++6:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"2351\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"gcc-10\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libsystemd0@247.3-7?arch=amd64\\u0026upstream=systemd\\u0026distro=debian-11\\u0026syft-id=3370fe554255d7c3\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian systemd Maintainers \\u003cpkg-systemd-maintainers@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libsystemd0\",\n      \"version\": \"247.3-7\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"CC0-1.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libsystemd0:libsystemd0:247.3-7:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libsystemd0@247.3-7?arch=amd64\\u0026upstream=systemd\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libsystemd0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libsystemd0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"865\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"systemd\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libtasn1-6@4.16.0-2?arch=amd64\\u0026distro=debian-11\\u0026syft-id=1199338f3c44b5f9\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian GnuTLS Maintainers \\u003cpkg-gnutls-maint@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libtasn1-6\",\n      \"version\": \"4.16.0-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.3\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libtasn1-6:libtasn1-6:4.16.0-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libtasn1-6@4.16.0-2?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtasn1-6:libtasn1_6:4.16.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtasn1_6:libtasn1-6:4.16.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtasn1_6:libtasn1_6:4.16.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtasn1:libtasn1-6:4.16.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtasn1:libtasn1_6:4.16.0-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libtasn1-6/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libtasn1-6:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"124\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libtinfo6@6.2+20201114-2?arch=amd64\\u0026upstream=ncurses\\u0026distro=debian-11\\u0026syft-id=76649c61c5e6520b\",\n      \"type\": \"library\",\n      \"publisher\": \"Craig Small \\u003ccsmall@debian.org\\u003e\",\n      \"name\": \"libtinfo6\",\n      \"version\": \"6.2+20201114-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"X11\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libtinfo6:libtinfo6:6.2\\\\+20201114-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libtinfo6@6.2+20201114-2?arch=amd64\\u0026upstream=ncurses\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libtinfo6/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libtinfo6:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"536\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"ncurses\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libtirpc-common@1.3.1-1?arch=all\\u0026upstream=libtirpc\\u0026distro=debian-11\\u0026syft-id=6d92751678b5973c\",\n      \"type\": \"library\",\n      \"publisher\": \"Josue Ortega \\u003cjosue@debian.org\\u003e\",\n      \"name\": \"libtirpc-common\",\n      \"version\": \"1.3.1-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libtirpc-common:libtirpc-common:1.3.1-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libtirpc-common@1.3.1-1?arch=all\\u0026upstream=libtirpc\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtirpc-common:libtirpc_common:1.3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtirpc_common:libtirpc-common:1.3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtirpc_common:libtirpc_common:1.3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtirpc:libtirpc-common:1.3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:libtirpc:libtirpc_common:1.3.1-1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libtirpc-common/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libtirpc-common.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/libtirpc-common.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"34\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libtirpc\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libtirpc3@1.3.1-1?arch=amd64\\u0026upstream=libtirpc\\u0026distro=debian-11\\u0026syft-id=8246189b2a3e8d54\",\n      \"type\": \"library\",\n      \"publisher\": \"Josue Ortega \\u003cjosue@debian.org\\u003e\",\n      \"name\": \"libtirpc3\",\n      \"version\": \"1.3.1-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libtirpc3:libtirpc3:1.3.1-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libtirpc3@1.3.1-1?arch=amd64\\u0026upstream=libtirpc\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libtirpc3/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libtirpc3:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"225\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libtirpc\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libudev1@247.3-7?arch=amd64\\u0026upstream=systemd\\u0026distro=debian-11\\u0026syft-id=3c6e00638a1efa8f\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian systemd Maintainers \\u003cpkg-systemd-maintainers@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libudev1\",\n      \"version\": \"247.3-7\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"CC0-1.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libudev1:libudev1:247.3-7:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libudev1@247.3-7?arch=amd64\\u0026upstream=systemd\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libudev1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libudev1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"282\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"systemd\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libunistring2@0.9.10-4?arch=amd64\\u0026upstream=libunistring\\u0026distro=debian-11\\u0026syft-id=4dbb87951d2cf1f5\",\n      \"type\": \"library\",\n      \"publisher\": \"Jörg Frings-Fürst \\u003cdebian@jff.email\\u003e\",\n      \"name\": \"libunistring2\",\n      \"version\": \"0.9.10-4\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GFDL-1.2\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libunistring2:libunistring2:0.9.10-4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libunistring2@0.9.10-4?arch=amd64\\u0026upstream=libunistring\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libunistring2/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libunistring2:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"1592\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libunistring\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libuuid1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\\u0026syft-id=1d48540a3383b13\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"libuuid1\",\n      \"version\": \"2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libuuid1:libuuid1:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libuuid1@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libuuid1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libuuid1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"129\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"util-linux\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libxxhash0@0.8.0-2?arch=amd64\\u0026upstream=xxhash\\u0026distro=debian-11\\u0026syft-id=5dbfd774c60b62b7\",\n      \"type\": \"library\",\n      \"publisher\": \"Norbert Preining \\u003cnorbert@preining.info\\u003e\",\n      \"name\": \"libxxhash0\",\n      \"version\": \"0.8.0-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libxxhash0:libxxhash0:0.8.0-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libxxhash0@0.8.0-2?arch=amd64\\u0026upstream=xxhash\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libxxhash0/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libxxhash0:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"114\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"xxhash\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/libzstd1@1.4.8+dfsg-2.1?arch=amd64\\u0026upstream=libzstd\\u0026distro=debian-11\\u0026syft-id=ebcdac604e89e227\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian Med Packaging Team \\u003cdebian-med-packaging@lists.alioth.debian.org\\u003e\",\n      \"name\": \"libzstd1\",\n      \"version\": \"1.4.8+dfsg-2.1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"Zlib\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:libzstd1:libzstd1:1.4.8\\\\+dfsg-2.1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/libzstd1@1.4.8+dfsg-2.1?arch=amd64\\u0026upstream=libzstd\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/libzstd1/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/libzstd1:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"904\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"libzstd\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/login@1:4.8.1-1?arch=amd64\\u0026upstream=shadow\\u0026distro=debian-11\\u0026syft-id=b6673a35736c938f\",\n      \"type\": \"library\",\n      \"publisher\": \"Shadow package maintainers \\u003cpkg-shadow-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"login\",\n      \"version\": \"1:4.8.1-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:login:login:1\\\\:4.8.1-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/login@1:4.8.1-1?arch=amd64\\u0026upstream=shadow\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/login/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/login.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/login.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"2335\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"shadow\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/logsave@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\\u0026syft-id=785d3365eb8d1fd1\",\n      \"type\": \"library\",\n      \"publisher\": \"Theodore Y. Ts'o \\u003ctytso@mit.edu\\u003e\",\n      \"name\": \"logsave\",\n      \"version\": \"1.46.2-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:logsave:logsave:1.46.2-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/logsave@1.46.2-2?arch=amd64\\u0026upstream=e2fsprogs\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/logsave/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/logsave.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"93\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"e2fsprogs\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/lsb-base@11.1.0?arch=all\\u0026upstream=lsb\\u0026distro=debian-11\\u0026syft-id=df87d50c1cf551b9\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian sysvinit maintainers \\u003cdebian-init-diversity@chiark.greenend.org.uk\\u003e\",\n      \"name\": \"lsb-base\",\n      \"version\": \"11.1.0\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:lsb-base:lsb-base:11.1.0:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/lsb-base@11.1.0?arch=all\\u0026upstream=lsb\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:lsb-base:lsb_base:11.1.0:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:lsb_base:lsb-base:11.1.0:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:lsb_base:lsb_base:11.1.0:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:lsb:lsb-base:11.1.0:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:lsb:lsb_base:11.1.0:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/lsb-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/lsb-base.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"49\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"lsb\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/mawk@1.3.4.20200120-2?arch=amd64\\u0026distro=debian-11\\u0026syft-id=86913dec0f0c000d\",\n      \"type\": \"library\",\n      \"publisher\": \"Boyuan Yang \\u003cbyang@debian.org\\u003e\",\n      \"name\": \"mawk\",\n      \"version\": \"1.3.4.20200120-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:mawk:mawk:1.3.4.20200120-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/mawk@1.3.4.20200120-2?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/mawk/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/mawk.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"242\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/mount@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\\u0026syft-id=16d02d85542621d3\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"mount\",\n      \"version\": \"2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:mount:mount:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/mount@2.36.1-8+deb11u1?arch=amd64\\u0026upstream=util-linux\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/mount/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/mount.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"438\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"util-linux\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/ncurses-base@6.2+20201114-2?arch=all\\u0026upstream=ncurses\\u0026distro=debian-11\\u0026syft-id=20d92f7e7d8b38f3\",\n      \"type\": \"library\",\n      \"publisher\": \"Craig Small \\u003ccsmall@debian.org\\u003e\",\n      \"name\": \"ncurses-base\",\n      \"version\": \"6.2+20201114-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"X11\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:ncurses-base:ncurses-base:6.2\\\\+20201114-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/ncurses-base@6.2+20201114-2?arch=all\\u0026upstream=ncurses\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses-base:ncurses_base:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses_base:ncurses-base:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses_base:ncurses_base:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses:ncurses-base:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses:ncurses_base:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/ncurses-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/ncurses-base.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/ncurses-base.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"385\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"ncurses\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/ncurses-bin@6.2+20201114-2?arch=amd64\\u0026upstream=ncurses\\u0026distro=debian-11\\u0026syft-id=a9b59b7b725d0bbb\",\n      \"type\": \"library\",\n      \"publisher\": \"Craig Small \\u003ccsmall@debian.org\\u003e\",\n      \"name\": \"ncurses-bin\",\n      \"version\": \"6.2+20201114-2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"X11\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:ncurses-bin:ncurses-bin:6.2\\\\+20201114-2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/ncurses-bin@6.2+20201114-2?arch=amd64\\u0026upstream=ncurses\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses-bin:ncurses_bin:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses_bin:ncurses-bin:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses_bin:ncurses_bin:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses:ncurses-bin:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:ncurses:ncurses_bin:6.2\\\\+20201114-2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/ncurses-bin/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/ncurses-bin.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"645\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"ncurses\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/passwd@1:4.8.1-1?arch=amd64\\u0026upstream=shadow\\u0026distro=debian-11\\u0026syft-id=c0f87faa100a3ce7\",\n      \"type\": \"library\",\n      \"publisher\": \"Shadow package maintainers \\u003cpkg-shadow-devel@lists.alioth.debian.org\\u003e\",\n      \"name\": \"passwd\",\n      \"version\": \"1:4.8.1-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:passwd:passwd:1\\\\:4.8.1-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/passwd@1:4.8.1-1?arch=amd64\\u0026upstream=shadow\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/passwd/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/passwd.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/passwd.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"2736\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"shadow\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/perl-base@5.32.1-4+deb11u2?arch=amd64\\u0026upstream=perl\\u0026distro=debian-11\\u0026syft-id=abcb5b1412cd9c08\",\n      \"type\": \"library\",\n      \"publisher\": \"Niko Tyni \\u003cntyni@debian.org\\u003e\",\n      \"name\": \"perl-base\",\n      \"version\": \"5.32.1-4+deb11u2\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"Artistic-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-1.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-1.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"Zlib\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:perl-base:perl-base:5.32.1-4\\\\+deb11u2:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/perl-base@5.32.1-4+deb11u2?arch=amd64\\u0026upstream=perl\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:perl-base:perl_base:5.32.1-4\\\\+deb11u2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:perl_base:perl-base:5.32.1-4\\\\+deb11u2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:perl_base:perl_base:5.32.1-4\\\\+deb11u2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:perl:perl-base:5.32.1-4\\\\+deb11u2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:perl:perl_base:5.32.1-4\\\\+deb11u2:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/perl-base/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/perl-base.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"7664\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"perl\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/sed@4.7-1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=60af338a72e539c1\",\n      \"type\": \"library\",\n      \"publisher\": \"Clint Adams \\u003cclint@debian.org\\u003e\",\n      \"name\": \"sed\",\n      \"version\": \"4.7-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:sed:sed:4.7-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/sed@4.7-1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/sed/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/sed.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"883\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/sysvinit-utils@2.96-7+deb11u1?arch=amd64\\u0026upstream=sysvinit\\u0026distro=debian-11\\u0026syft-id=fe0ee7268a410c4a\",\n      \"type\": \"library\",\n      \"publisher\": \"Debian sysvinit maintainers \\u003cdebian-init-diversity@chiark.greenend.org.uk\\u003e\",\n      \"name\": \"sysvinit-utils\",\n      \"version\": \"2.96-7+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:sysvinit-utils:sysvinit-utils:2.96-7\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/sysvinit-utils@2.96-7+deb11u1?arch=amd64\\u0026upstream=sysvinit\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:sysvinit-utils:sysvinit_utils:2.96-7\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:sysvinit_utils:sysvinit-utils:2.96-7\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:sysvinit_utils:sysvinit_utils:2.96-7\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:sysvinit:sysvinit-utils:2.96-7\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:sysvinit:sysvinit_utils:2.96-7\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/sysvinit-utils/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/sysvinit-utils.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"79\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"sysvinit\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/tar@1.34+dfsg-1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=2c804797b124e34\",\n      \"type\": \"library\",\n      \"publisher\": \"Janos Lenart \\u003cocsi@debian.org\\u003e\",\n      \"name\": \"tar\",\n      \"version\": \"1.34+dfsg-1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:tar:tar:1.34\\\\+dfsg-1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/tar@1.34+dfsg-1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/tar/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/tar.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"3152\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/tzdata@2021a-1+deb11u4?arch=all\\u0026distro=debian-11\\u0026syft-id=794b24b8ad1996e1\",\n      \"type\": \"library\",\n      \"publisher\": \"GNU Libc Maintainers \\u003cdebian-glibc@lists.debian.org\\u003e\",\n      \"name\": \"tzdata\",\n      \"version\": \"2021a-1+deb11u4\",\n      \"cpe\": \"cpe:2.3:a:tzdata:tzdata:2021a-1\\\\+deb11u4:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/tzdata@2021a-1+deb11u4?arch=all\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/tzdata/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/tzdata.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"3409\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/util-linux@2.36.1-8+deb11u1?arch=amd64\\u0026distro=debian-11\\u0026syft-id=ba5bb3d6ca7609c5\",\n      \"type\": \"library\",\n      \"publisher\": \"util-linux packagers \\u003cutil-linux@packages.debian.org\\u003e\",\n      \"name\": \"util-linux\",\n      \"version\": \"2.36.1-8+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"BSD-2-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-3-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"BSD-4-Clause\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"GPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-2.1+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"LGPL-3.0+\"\n          }\n        },\n        {\n          \"license\": {\n            \"id\": \"MIT\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:util-linux:util-linux:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/util-linux@2.36.1-8+deb11u1?arch=amd64\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:util-linux:util_linux:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:util_linux:util-linux:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:util_linux:util_linux:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:util:util-linux:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:cpe23\",\n          \"value\": \"cpe:2.3:a:util:util_linux:2.36.1-8\\\\+deb11u1:*:*:*:*:*:*:*\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/util-linux/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/util-linux.conffiles\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/info/util-linux.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:3:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:3:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"4615\"\n        }\n      ]\n    },\n    {\n      \"bom-ref\": \"pkg:deb/debian/zlib1g@1:1.2.11.dfsg-2+deb11u1?arch=amd64\\u0026upstream=zlib\\u0026distro=debian-11\\u0026syft-id=eda9db1f3f3729c1\",\n      \"type\": \"library\",\n      \"publisher\": \"Mark Brown \\u003cbroonie@debian.org\\u003e\",\n      \"name\": \"zlib1g\",\n      \"version\": \"1:1.2.11.dfsg-2+deb11u1\",\n      \"licenses\": [\n        {\n          \"license\": {\n            \"id\": \"Zlib\"\n          }\n        }\n      ],\n      \"cpe\": \"cpe:2.3:a:zlib1g:zlib1g:1\\\\:1.2.11.dfsg-2\\\\+deb11u1:*:*:*:*:*:*:*\",\n      \"purl\": \"pkg:deb/debian/zlib1g@1:1.2.11.dfsg-2+deb11u1?arch=amd64\\u0026upstream=zlib\\u0026distro=debian-11\",\n      \"properties\": [\n        {\n          \"name\": \"syft:package:foundBy\",\n          \"value\": \"dpkgdb-cataloger\"\n        },\n        {\n          \"name\": \"syft:package:metadataType\",\n          \"value\": \"DpkgMetadata\"\n        },\n        {\n          \"name\": \"syft:package:type\",\n          \"value\": \"deb\"\n        },\n        {\n          \"name\": \"syft:location:0:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:0:path\",\n          \"value\": \"/usr/share/doc/zlib1g/copyright\"\n        },\n        {\n          \"name\": \"syft:location:1:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:1:path\",\n          \"value\": \"/var/lib/dpkg/info/zlib1g:amd64.md5sums\"\n        },\n        {\n          \"name\": \"syft:location:2:layerID\",\n          \"value\": \"sha256:43b3c4e3001c662d1c264ffb132f4e52950893452b15508df810214f1d3f124b\"\n        },\n        {\n          \"name\": \"syft:location:2:path\",\n          \"value\": \"/var/lib/dpkg/status\"\n        },\n        {\n          \"name\": \"syft:metadata:installedSize\",\n          \"value\": \"166\"\n        },\n        {\n          \"name\": \"syft:metadata:source\",\n          \"value\": \"zlib\"\n        }\n      ]\n    },\n    {\n      \"type\": \"operating-system\",\n      \"name\": \"debian\",\n      \"version\": \"11\",\n      \"description\": \"Debian GNU/Linux 11 (bullseye)\",\n      \"swid\": {\n        \"tagId\": \"debian\",\n        \"name\": \"debian\",\n        \"version\": \"11\"\n      },\n      \"externalReferences\": [\n        {\n          \"url\": \"https://bugs.debian.org/\",\n          \"type\": \"issue-tracker\"\n        },\n        {\n          \"url\": \"https://www.debian.org/\",\n          \"type\": \"website\"\n        },\n        {\n          \"url\": \"https://www.debian.org/support\",\n          \"comment\": \"support\",\n          \"type\": \"other\"\n        }\n      ],\n      \"properties\": [\n        {\n          \"name\": \"syft:distro:id\",\n          \"value\": \"debian\"\n        },\n        {\n          \"name\": \"syft:distro:prettyName\",\n          \"value\": \"Debian GNU/Linux 11 (bullseye)\"\n        },\n        {\n          \"name\": \"syft:distro:versionID\",\n          \"value\": \"11\"\n        }\n      ]\n    }\n  ]\n}\n","Timestamp":"2022-07-13T20:17:09Z"}}",
    "signatures": [
        {
            "keyid": "",
            "sig": "MEUCIQDZnJx/8xr6GRPQEW7j6zOVrUUknyn7cWJJYFb1ncVPxgIgEZu3FEZ8zI57dRNgrQHKNfmrKeR0gWT1RMvyCFkN1S8="
        }
    ]
}